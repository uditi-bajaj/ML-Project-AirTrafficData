# -*- coding: utf-8 -*-
"""Updated project code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10D558ax3QlJJejxxDUvQ5huejndr8mal

# ML PROJECT
**Use the following Air traffic data to analyse Passenger count and predict the Adjusted Passenger count based upon given Feature.**
"""

#importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

#importing dataset
dataset = pd.read_csv("/content/air_traffic_data.csv")
#viewing dataset
dataset.head(10).T

#viewing dataset
dataset.head(10).T

"""## Understanding the given data set"""

dataset.shape

dataset.dtypes

numerical = [var for var in dataset.columns if dataset[var].dtype!='O'] #check numerical columns
categorical = [var for var in dataset.columns if dataset[var].dtype == 'O'] #check object columns

print('There are {} numerical variables'.format(len(numerical)))
print('There are {} categorical variables'.format(len(categorical)))

dataset.isnull().sum()

#dropping the rows with null values
dataset_1 = dataset.dropna()
dataset_1.head(10).T

"""## Fetching the Feature variable and the Target variable"""

X = dataset_1['Passenger Count'] #feature variable
Y = dataset_1['Adjusted Passenger Count'] #target variable

X

#Finding the mean of x and y
x_mean = np.mean(X)
x_mean

y_mean = np.mean(Y)
y_mean

#total value of X
n = len(X)

n

numerator = 0
denominator = 0 

for i in range(5):
  numerator += (X[i] - x_mean) * (Y[i] - y_mean)
  denominator += (X[i] - x_mean)**2

m = numerator/denominator
c = y_mean - (m * x_mean)

type(x_mean)

"""## Train and testing"""

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.20,random_state=42)

X_test.shape

X = dataset_1['Passenger Count'].values #feature variable
Y = dataset_1['Adjusted Passenger Count'].values #target variable

X.shape

Y.shape

X = X.reshape(14953,1)
Y = Y.reshape(14953,1)

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.20,random_state=42)

print("X train: ", X_train.shape)

print("X test: ", X_test.shape)

print("Y train: ", Y_train.shape)

print("Y test: ", Y_test.shape)

from sklearn.linear_model import LinearRegression

regressor = LinearRegression()

type(X_train)

model = regressor.fit(X_train,Y_train)

regressor.score(X_test,Y_test)

regressor.intercept_

predictions = regressor.predict(X_train)
predictions

plt.scatter(X_train, Y_train)
plt.plot(X_train, regressor.predict(X_train), color='red')
plt.title('Passenger Count vs Adjusted Passenger Count (Training set)')
plt.xlabel('Passenger Count')
plt.ylabel('Adjusted passenger count')
plt.show()

n =len(X_test)
n

x_mean = np.mean(X_test)
x_mean

y_mean = np.mean(Y_test)
y_mean

numerator = 0
denominator = 0

for i in range(n):
  numerator += (X_test[i] - x_mean)*(Y_test[i] - y_mean)
  denominator += (X_test[i] - x_mean)**2

m = numerator/denominator
c = y_mean - (m*x_mean)

numerator

denominator

c

print('m =',m, 'c =',c)

import pickle
pickle.dump(regressor,open('model.pkl','wb'))

model = pickle.load(open('/content/model.pkl','rb'))

predicted_value = model.predict([[34090]])
print(predicted_value)

Y_test

#rss = ((Y_train - predictions)**2).sum()
mse = np.mean((Y_train - predictions)**2)
print("Final rmse value is =",np.sqrt(mse))

mse

Y

#MEASURING THE ACCURACY OF MY MODEL
sst = 0
ssr = 0

for i in range(n):
  predictions = c+(m*X[i])
  sst += (Y[i] - y_mean)** 2
  ssr += (Y[i] - predictions)**2

score = 1 - (ssr/sst)
print('R^2 score is',score,'and our accuracy is',score*100)